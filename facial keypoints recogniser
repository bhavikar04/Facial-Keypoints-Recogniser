{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":62891,"databundleVersionId":6855609,"sourceType":"competition"}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-11-01T09:59:11.251589Z","iopub.execute_input":"2023-11-01T09:59:11.251969Z","iopub.status.idle":"2023-11-01T09:59:11.626992Z","shell.execute_reply.started":"2023-11-01T09:59:11.251938Z","shell.execute_reply":"2023-11-01T09:59:11.625973Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"/kaggle/input/keypoint-identification-cv-contingent-selections/sample_submission.csv\n/kaggle/input/keypoint-identification-cv-contingent-selections/training.csv\n/kaggle/input/keypoint-identification-cv-contingent-selections/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"\nimport matplotlib.pyplot as plt\n","metadata":{"execution":{"iopub.status.busy":"2023-11-01T09:59:15.654964Z","iopub.execute_input":"2023-11-01T09:59:15.655930Z","iopub.status.idle":"2023-11-01T09:59:15.660378Z","shell.execute_reply.started":"2023-11-01T09:59:15.655895Z","shell.execute_reply":"2023-11-01T09:59:15.659285Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_data_df = pd.read_csv('/kaggle/input/keypoint-identification-cv-contingent-selections/training.csv')\ntest_data_df = pd.read_csv('/kaggle/input/keypoint-identification-cv-contingent-selections/test.csv')","metadata":{"execution":{"iopub.status.busy":"2023-11-01T09:59:18.588718Z","iopub.execute_input":"2023-11-01T09:59:18.589422Z","iopub.status.idle":"2023-11-01T09:59:23.467999Z","shell.execute_reply.started":"2023-11-01T09:59:18.589368Z","shell.execute_reply":"2023-11-01T09:59:23.467111Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"def process_data(data_df,train):\n    if train:\n        y=np.array(data_df.iloc[:,:30])\n\n    img_dt = []\n    for i in range(len(data_df)):\n        img_dt.append(data_df['Image'][i].split(' '))\n\n    X=np.array(img_dt, dtype='float')\n    return X,y if train else \" \"\nX_train,y_train=process_data(train_data_df,True)\nX_test_submit,_=process_data(test_data_df,False)","metadata":{"execution":{"iopub.status.busy":"2023-11-01T09:59:27.337905Z","iopub.execute_input":"2023-11-01T09:59:27.338778Z","iopub.status.idle":"2023-11-01T09:59:47.140775Z","shell.execute_reply.started":"2023-11-01T09:59:27.338741Z","shell.execute_reply":"2023-11-01T09:59:47.139631Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"class TrainDataset():\n\n    def __init__(self, X_train, y_train):\n        self.X_train = X_train\n        self.y_train = y_train\n        \n    def __len__(self):\n        return len(self.X_train)\n\n    def __getitem__(self, idx):\n        for idx in range(len(self.X_train)):\n            img = self.X_train[idx]\n            img = np.stack((img, img, img), axis=-1)\n            img = img / 255.0\n            img = np.transpose(img, (2, 0, 1)).copy()\n            img = torch.from_numpy(img).type(torch.FloatTensor)\n            keypoints = self.y_train[idx].astype('float32')\n           \n        return img, keypoints\n\n# Create a train dataset\n\n","metadata":{"execution":{"iopub.status.busy":"2023-11-01T09:59:57.708277Z","iopub.execute_input":"2023-11-01T09:59:57.708766Z","iopub.status.idle":"2023-11-01T09:59:57.718616Z","shell.execute_reply.started":"2023-11-01T09:59:57.708721Z","shell.execute_reply":"2023-11-01T09:59:57.717516Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nimputer=SimpleImputer(missing_values=np.nan, strategy='mean')\n\nfor i in range(30):\n    imputer.fit(y_train[:,i].reshape(-1,1))\n    y_train[:,i]=(imputer.transform(y_train[:,i].reshape(-1,1))).reshape(-1,)\n    ","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:00:02.345966Z","iopub.execute_input":"2023-11-01T10:00:02.346360Z","iopub.status.idle":"2023-11-01T10:00:03.150222Z","shell.execute_reply.started":"2023-11-01T10:00:02.346326Z","shell.execute_reply":"2023-11-01T10:00:03.149017Z"},"trusted":true},"execution_count":8,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/scipy/__init__.py:146: UserWarning: A NumPy version >=1.16.5 and <1.23.0 is required for this version of SciPy (detected version 1.23.5\n  warnings.warn(f\"A NumPy version >={np_minversion} and <{np_maxversion}\"\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train=X_train.reshape(X_train.shape[0],96,96)\nX_test_submit=X_test_submit.reshape(X_test_submit.shape[0],96,96)\nimport matplotlib.pyplot as plt\nplt.imshow(X_train[0], cmap='gray')\nplt.title(\"Input Image\")\nplt.savefig('plot.png', bbox_inches='tight')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:00:07.611205Z","iopub.execute_input":"2023-11-01T10:00:07.611609Z","iopub.status.idle":"2023-11-01T10:00:08.131172Z","shell.execute_reply.started":"2023-11-01T10:00:07.611580Z","shell.execute_reply":"2023-11-01T10:00:08.130141Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_points = [y_train[k].reshape([15,2]) for k in range(y_train.shape[0]) ]\ntrain_images = [X_train[k].reshape([96,96]) for k in range(X_train.shape[0])]","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:01:52.623177Z","iopub.execute_input":"2023-11-01T10:01:52.623907Z","iopub.status.idle":"2023-11-01T10:01:52.640625Z","shell.execute_reply.started":"2023-11-01T10:01:52.623873Z","shell.execute_reply":"2023-11-01T10:01:52.639456Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"def augment1(img, pnts, rot_deg, zoom_factor, x_shift_pix, y_shift_pix):\n    sz = img.shape[-2:]\n    def get_rotation(x):\n        mysz = x.new_ones(x.shape[0])\n        rot_rad = torch.ones_like(mysz)*(rot_deg / 180.0 * np.pi)\n        m11 = rot_rad.cos() / zoom_factor\n        m12 = rot_rad.sin() / zoom_factor\n        t0 = torch.ones_like(mysz)*(x_shift_pix/48.0)\n        t1 = torch.ones_like(mysz)*(y_shift_pix/48.0)\n        return affine_mat(m11, m12, t0, -m12, m11, t1)\n    t1 = AffineCoordTfm(aff_fs=get_rotation, size=sz)\n    p1 = Pipeline(funcs=t1)\n    x = TensorImage(img).view([1,1,96,96])\n    y = TensorPoint(pnts, img_size=[96,96]).view([1,15,2])\n    x,y = p1((x,y/48.0-1.0))\n    y = y.view([15,2])\n    coord_ok = (y[:,0] > -1.0) & (y[:,0] < 1.0) & (y[:,1] > -1.0) & (y[:,1] < 1.0)\n    coord_ok = torch.stack([coord_ok, coord_ok], dim=1)\n    y = y.where(coord_ok, tensor(np.nan))\n    y = y*48.0+48.0\n    return np.array(x.view([96,96])), np.array(y)","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:01:58.145712Z","iopub.execute_input":"2023-11-01T10:01:58.146094Z","iopub.status.idle":"2023-11-01T10:01:58.157554Z","shell.execute_reply.started":"2023-11-01T10:01:58.146062Z","shell.execute_reply":"2023-11-01T10:01:58.156542Z"},"trusted":true},"execution_count":14,"outputs":[]},{"cell_type":"code","source":"import cv2\nimport numpy as np\n\ndef augment(img, pnts, rot_deg, zoom_factor, x_shift_pix, y_shift_pix):\n\n    # Rotate the image\n    rotation_matrix = cv2.getRotationMatrix2D((48, 48), rot_deg, zoom_factor)\n    img = cv2.warpAffine(img, rotation_matrix, dsize=(96, 96))\n\n    # Shift the image\n    translation_matrix = np.float32([[1, 0, x_shift_pix], [0, 1, y_shift_pix]])\n    img = cv2.warpAffine(img, translation_matrix, dsize=(96, 96))\n\n    # Augment the point landmarks\n    pnts = np.dot(pnts, rotation_matrix.T)\n    pnts[:, 0] += x_shift_pix\n    pnts[:, 1] += y_shift_pix\n\n    return img, pnts\n","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:19:24.983241Z","iopub.execute_input":"2023-11-01T10:19:24.983634Z","iopub.status.idle":"2023-11-01T10:19:24.991379Z","shell.execute_reply.started":"2023-11-01T10:19:24.983602Z","shell.execute_reply":"2023-11-01T10:19:24.990289Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"augs = []\none_pixel = 2.0/96.0\nfor dx in range(21):\n    for dy in range(21):\n        if dx==10 and dy==10:\n            continue\n        augs.append([0.0, 1.0, dx-10.0, dy-10.0])\nfor rot_deg in range(21):\n    if rot_deg==10:\n        continue\n    augs.append([rot_deg-10, 1.0, 0.0, 0.0])\nfor scale in range(21):\n    if scale==10:\n        continue\n    augs.append([0.0, 0.9 + 0.01*scale, 0.0, 0.0])\nprint(len(augs))","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:19:29.429327Z","iopub.execute_input":"2023-11-01T10:19:29.430133Z","iopub.status.idle":"2023-11-01T10:19:29.438941Z","shell.execute_reply.started":"2023-11-01T10:19:29.430096Z","shell.execute_reply":"2023-11-01T10:19:29.437702Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"480\n","output_type":"stream"}]},{"cell_type":"code","source":"aug_images = []\naug_points = []\naug_ind = 0\nfor k1 in range(len(train_images)):\n    img,pnt = augment(train_images[k1], train_points[k1], *augs[aug_ind])\n    aug_images.append(train_images[k1])\n    aug_points.append(train_points[k1])\n    aug_images.append(img)\n    aug_points.append(pnt)\n    aug_ind = (aug_ind + 1) % len(augs)\nprint(len(aug_images))","metadata":{"execution":{"iopub.status.busy":"2023-11-01T10:19:35.958656Z","iopub.execute_input":"2023-11-01T10:19:35.959030Z","iopub.status.idle":"2023-11-01T10:19:36.032888Z","shell.execute_reply.started":"2023-11-01T10:19:35.959000Z","shell.execute_reply":"2023-11-01T10:19:36.031499Z"},"trusted":true},"execution_count":20,"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Cell \u001b[0;32mIn[20], line 5\u001b[0m\n\u001b[1;32m      3\u001b[0m aug_ind \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m      4\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m k1 \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(train_images)):\n\u001b[0;32m----> 5\u001b[0m     img,pnt \u001b[38;5;241m=\u001b[39m \u001b[43maugment\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_images\u001b[49m\u001b[43m[\u001b[49m\u001b[43mk1\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrain_points\u001b[49m\u001b[43m[\u001b[49m\u001b[43mk1\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maugs\u001b[49m\u001b[43m[\u001b[49m\u001b[43maug_ind\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m     aug_images\u001b[38;5;241m.\u001b[39mappend(train_images[k1])\n\u001b[1;32m      7\u001b[0m     aug_points\u001b[38;5;241m.\u001b[39mappend(train_points[k1])\n","Cell \u001b[0;32mIn[18], line 15\u001b[0m, in \u001b[0;36maugment\u001b[0;34m(img, pnts, rot_deg, zoom_factor, x_shift_pix, y_shift_pix)\u001b[0m\n\u001b[1;32m     12\u001b[0m img \u001b[38;5;241m=\u001b[39m cv2\u001b[38;5;241m.\u001b[39mwarpAffine(img, translation_matrix, dsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m96\u001b[39m, \u001b[38;5;241m96\u001b[39m))\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# Augment the point landmarks\u001b[39;00m\n\u001b[0;32m---> 15\u001b[0m pnts \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdot\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpnts\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrotation_matrix\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mT\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     16\u001b[0m pnts[:, \u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m x_shift_pix\n\u001b[1;32m     17\u001b[0m pnts[:, \u001b[38;5;241m1\u001b[39m] \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m y_shift_pix\n","File \u001b[0;32m<__array_function__ internals>:180\u001b[0m, in \u001b[0;36mdot\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: shapes (15,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)"],"ename":"ValueError","evalue":"shapes (15,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)","output_type":"error"}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom fastai.vision.all import ImageDataLoaders,DataLoader\nimport tensorflow as tf\nfrom torchvision import transforms\nfrom torch.utils.data import Dataset, DataLoader\nresize_transform = transforms.RandomResizedCrop((96, 96))\n# Load your training data\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=1)\ntrain_dataset=TrainDataset(X_train,y_train)\ntest_dataset=TrainDataset(X_test,y_test)\n#train_dataset = tf.data.Dataset.from_tensor_slices((X_train, y_train)).batch(64)\n#test_dataset = tf.data.Dataset.from_tensor_slices((X_test, y_test)).batch(64)\n# Create an ImageDataBunch object from the training and test data\n#dataloaders = ImageDataLoaders(X_train, X_test, y_train, y_test,bs=64)\ntrain_dls = DataLoader(train_dataset, batch_size=64,shuffle=True)\ntest_dls = DataLoader(test_dataset, batch_size=64,shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2023-10-27T18:48:30.551731Z","iopub.execute_input":"2023-10-27T18:48:30.552131Z","iopub.status.idle":"2023-10-27T18:48:30.561210Z","shell.execute_reply.started":"2023-10-27T18:48:30.552100Z","shell.execute_reply":"2023-10-27T18:48:30.560230Z"},"trusted":true},"execution_count":119,"outputs":[]},{"cell_type":"code","source":"import torchvision\nimport torch\nmodel = torchvision.models.resnet18(pretrained=True)\nfor param in model.parameters():\n    param.requires_grad = False\nmodel.fc = torch.nn.Linear(model.fc.in_features, 30)\n\nmodel = model.type(torch.FloatTensor)\n","metadata":{"execution":{"iopub.status.busy":"2023-10-27T16:46:57.557716Z","iopub.execute_input":"2023-10-27T16:46:57.558340Z","iopub.status.idle":"2023-10-27T16:46:57.763303Z","shell.execute_reply.started":"2023-10-27T16:46:57.558309Z","shell.execute_reply":"2023-10-27T16:46:57.762221Z"},"trusted":true},"execution_count":64,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.\n  warnings.warn(\n/opt/conda/lib/python3.10/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet18_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet18_Weights.DEFAULT` to get the most up-to-date weights.\n  warnings.warn(msg)\n","output_type":"stream"}]},{"cell_type":"code","source":"from torch import nn, optim\n\n# Define loss function and optimizer\ncriterion = nn.MSELoss()\noptimizer = optim.Adam(model.parameters(),lr=0.01, weight_decay=0.001)\nmodel.train()\n# Iterate over the training data\nfor epoch in range(25):\n    for i,(x,y) in enumerate(train_dls):\n        # Forward pass the data through the model\n        \n        outputs = model(x)\n\n        # Calculate the loss\n        loss = criterion(outputs,y)\n\n        # Backpropagate the loss through the model\n        optimizer.zero_grad()\n        loss.backward()\n        optimizer.step()\n        \n        # Print the loss\n        if i % 2== 0:\n            print('Epoch: {} | Batch: {} | Loss: {}'.format(epoch, i, loss.item()))","metadata":{"execution":{"iopub.status.busy":"2023-10-27T18:11:56.159724Z","iopub.execute_input":"2023-10-27T18:11:56.160059Z","iopub.status.idle":"2023-10-27T18:12:04.485636Z","shell.execute_reply.started":"2023-10-27T18:11:56.160033Z","shell.execute_reply":"2023-10-27T18:12:04.484676Z"},"trusted":true},"execution_count":102,"outputs":[{"name":"stdout","text":"Epoch: 0 | Batch: 0 | Loss: 100.20360565185547\nEpoch: 1 | Batch: 0 | Loss: 38.42731475830078\nEpoch: 2 | Batch: 0 | Loss: 10.228736877441406\nEpoch: 3 | Batch: 0 | Loss: 6.765289783477783\nEpoch: 4 | Batch: 0 | Loss: 14.669827461242676\nEpoch: 5 | Batch: 0 | Loss: 21.879114151000977\nEpoch: 6 | Batch: 0 | Loss: 23.715192794799805\nEpoch: 7 | Batch: 0 | Loss: 20.76768684387207\nEpoch: 8 | Batch: 0 | Loss: 15.490242958068848\nEpoch: 9 | Batch: 0 | Loss: 10.154047966003418\nEpoch: 10 | Batch: 0 | Loss: 6.371376991271973\nEpoch: 11 | Batch: 0 | Loss: 4.832908630371094\nEpoch: 12 | Batch: 0 | Loss: 5.160745620727539\nEpoch: 13 | Batch: 0 | Loss: 6.261314868927002\nEpoch: 14 | Batch: 0 | Loss: 7.040248870849609\nEpoch: 15 | Batch: 0 | Loss: 6.991109371185303\nEpoch: 16 | Batch: 0 | Loss: 6.254291534423828\nEpoch: 17 | Batch: 0 | Loss: 5.232071876525879\nEpoch: 18 | Batch: 0 | Loss: 4.214218616485596\nEpoch: 19 | Batch: 0 | Loss: 3.3246946334838867\nEpoch: 20 | Batch: 0 | Loss: 2.660195827484131\nEpoch: 21 | Batch: 0 | Loss: 2.333693742752075\nEpoch: 22 | Batch: 0 | Loss: 2.352292060852051\nEpoch: 23 | Batch: 0 | Loss: 2.532688856124878\nEpoch: 24 | Batch: 0 | Loss: 2.6168224811553955\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.save(model.state_dict(), 'model.pt')","metadata":{"execution":{"iopub.status.busy":"2023-10-27T18:17:30.852748Z","iopub.execute_input":"2023-10-27T18:17:30.853108Z","iopub.status.idle":"2023-10-27T18:17:30.954711Z","shell.execute_reply.started":"2023-10-27T18:17:30.853079Z","shell.execute_reply":"2023-10-27T18:17:30.953695Z"},"trusted":true},"execution_count":106,"outputs":[]},{"cell_type":"code","source":"def evaluate_model(model, test_loader):\n\n  model.eval()\n\n  correct = 0\n  total = 0\n  with torch.no_grad():\n    for batch,(images, labels) in test_dls:\n      # Forward pass\n      outputs = model(images)\n\n      # Calculate the predicted labels\n      _, predicted = torch.max(outputs.data, 1)\n\n      # Count the number of correct predictions\n      total += labels.size(0)\n      correct += (predicted == labels).sum().item()\n\n  # Calculate the accuracy\n  accuracy = 100 * correct / total\n\n  return accuracy\n\naccuracy = evaluate_model(model, test_loader)\n\n# Print the accuracy\nprint('Accuracy on the test data: {:.2f}%'.format(accuracy))","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Evaluate the model on the test data\ntotal_loss = 0\naccuracy = 0\ntotal = 0\nmodel.eval()\nwith torch.no_grad():\n    for batch,(imgs,vals) in enumerate(test_dls):\n        outputs = model(imgs)\n        loss = criterion(outputs, vals)\n\n        total_loss += loss.item()\n\n        # Calculate the accuracy\n        # by averaging the absolute difference between\n        # the predicted and actual values\n\n        abs_diff = torch.abs(outputs - vals)/vals\n        mean_abs_diff = torch.mean(1-abs_diff, dim=1)\n        accuracy +=  mean_abs_diff\n\n        total += vals.size(0)\n\n# Calculate the average loss and accuracy\naverage_loss = total_loss / len(test_dls)\naccuracy = 100 * accuracy \n\n# Print the results\nprint('Test loss: {}'.format(average_loss))\nprint('Test accuracy: {}%'.format(accuracy))","metadata":{"execution":{"iopub.status.busy":"2023-10-27T18:10:58.729378Z","iopub.execute_input":"2023-10-27T18:10:58.730140Z","iopub.status.idle":"2023-10-27T18:10:58.805007Z","shell.execute_reply.started":"2023-10-27T18:10:58.730105Z","shell.execute_reply":"2023-10-27T18:10:58.803979Z"},"trusted":true},"execution_count":99,"outputs":[{"name":"stdout","text":"Test loss: 8833.509765625\nTest accuracy: tensor([-136.7984, -136.7984, -136.7984, -136.7984, -136.7984, -136.7984,\n        -136.7984, -136.7984, -136.7984, -136.7984])%\n","output_type":"stream"}]},{"cell_type":"code","source":"\ncols = pd.read_csv('/kaggle/input/keypoint-identification-cv-contingent-selections/sample_submission.csv').iloc[0,0:30].index\npreds = pd.DataFrame(columns=cols)\n# Iterate over the test data and make predictions\nfor i in range(len(X_test_submit)):\n    image = X_test_submit[i]\n    image = image.reshape([96, 96])\n    image = np.stack((image, image, image), axis=-1)\n    image = image / 255.0\n    image = np.transpose(image, (2, 0, 1)).copy()\n   \n    image = torch.from_numpy(image).type(torch.FloatTensor)\n    image = image.unsqueeze(0)\n    with torch.no_grad():\n        out = model(image).cpu().detach().numpy().reshape((30,))\n        \n    # Add the predictions to the DataFrame\n    preds.loc[i]=out\nID=[]\nfor i in range(1,1501):\n    ID.append(i)\npreds['ID']=ID\nprint (preds.shape)\npreds.to_csv('submission.csv',index = False)","metadata":{"execution":{"iopub.status.busy":"2023-10-27T18:44:38.360074Z","iopub.execute_input":"2023-10-27T18:44:38.360508Z","iopub.status.idle":"2023-10-27T18:45:00.162109Z","shell.execute_reply.started":"2023-10-27T18:44:38.360475Z","shell.execute_reply":"2023-10-27T18:45:00.161200Z"},"trusted":true},"execution_count":118,"outputs":[{"name":"stdout","text":"(1500, 31)\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}